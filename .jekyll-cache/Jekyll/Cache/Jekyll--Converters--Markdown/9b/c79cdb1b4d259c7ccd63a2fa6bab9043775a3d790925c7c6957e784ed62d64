I"n<ul class="toc" id="markdown-toc">
  <li><a href="#참고한-글" id="markdown-toc-참고한-글">참고한 글</a></li>
  <li><a href="#ajax란" id="markdown-toc-ajax란">Ajax란?</a></li>
  <li><a href="#xmlhttprequest의-프로퍼티" id="markdown-toc-xmlhttprequest의-프로퍼티">XMLHttpRequest의 프로퍼티</a>    <ul>
      <li><a href="#xmlhttprequestopen" id="markdown-toc-xmlhttprequestopen">XMLHttpRequest.open()</a></li>
      <li><a href="#xmlhttprequestsetrequestheader" id="markdown-toc-xmlhttprequestsetrequestheader">XMLHttpRequest.setRequestHeader()</a></li>
      <li><a href="#xmlhttprequestsend" id="markdown-toc-xmlhttprequestsend">XMLHttpRequest.send()</a></li>
      <li><a href="#xmlhttprequestabort" id="markdown-toc-xmlhttprequestabort">XMLHttpRequest.abort()</a></li>
      <li><a href="#xmlhttprequestgetallresponseheaders" id="markdown-toc-xmlhttprequestgetallresponseheaders">XMLHttpRequest.getAllResponseHeaders()</a></li>
      <li><a href="#xmlhttprequestgetresponseheader" id="markdown-toc-xmlhttprequestgetresponseheader">XMLHttpRequest.getResponseHeader()</a></li>
      <li><a href="#xmlhttprequesttimeout" id="markdown-toc-xmlhttprequesttimeout">XMLHttpRequest.timeout</a></li>
      <li><a href="#xmlhttprequestresponsetext" id="markdown-toc-xmlhttprequestresponsetext">XMLHttpRequest.responseText</a></li>
      <li><a href="#xmlhttprequestresponsexml" id="markdown-toc-xmlhttprequestresponsexml">XMLHttpRequest.responseXML</a></li>
      <li><a href="#xmlhttprequeststatus" id="markdown-toc-xmlhttprequeststatus">XMLHttpRequest.status</a></li>
      <li><a href="#xmlhttprequeststatustext" id="markdown-toc-xmlhttprequeststatustext">XMLHttpRequest.statusText</a></li>
      <li><a href="#xmlhttprequestreadystate" id="markdown-toc-xmlhttprequestreadystate">XMLHttpRequest.readyState</a></li>
    </ul>
  </li>
  <li><a href="#attach-callback-function" id="markdown-toc-attach-callback-function">Attach callback function</a>    <ul>
      <li><a href="#xmlhttprequestonreadystatechange" id="markdown-toc-xmlhttprequestonreadystatechange">XMLHttpRequest.onreadystatechange</a></li>
      <li><a href="#eventtargetaddeventlistener" id="markdown-toc-eventtargetaddeventlistener">EventTarget.addEventListener()</a></li>
      <li><a href="#xmlhttprequesteventtarget" id="markdown-toc-xmlhttprequesteventtarget">XMLHttpRequestEventTarget</a></li>
    </ul>
  </li>
</ul>

<h4 id="참고한-글">참고한 글</h4>
<ul>
  <li><a href="https://xhr.spec.whatwg.org/">https://xhr.spec.whatwg.org/</a></li>
  <li><a href="http://www.w3schools.com/ajax/">http://www.w3schools.com/ajax/</a></li>
  <li><a href="https://developer.mozilla.org/ko/docs/XMLHttpRequest">https://developer.mozilla.org/ko/docs/XMLHttpRequest</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest">https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest</a></li>
  <li><a href="http://huns.me/development/1291">http://huns.me/development/1291</a></li>
</ul>

<h2 id="ajax란">Ajax란?</h2>
<p>Ajax는 ‘Asynchronous JavaScript and XML’의 약자로 웹 애플리케이션 개발 기법의 하나다. Ajax는 독립된 기술을 의미하기보단 여러 기술의 묶음을 지칭하는 용어에 가깝다. 실제로 Ajax를 구현하는 데는 HTML, CSS, DOM, 자바스크립트, XML, XSLT, XPath, XMLHttpRequest 등이 사용된다.</p>

<p>Ajax를 사용하려면 먼저 브라우저의 내장 함수로 XMLHttpRequest 객체(의외지만 XMLHttpRequest는 마이크로소프트에서 처음 만들었다)를 생성해야 한다. 과거엔 ActiveXObject라는 소름 돋는 이름의 생성자를 사용했지만, 웹 사용자의 최소 환경이 IE8인 요즘엔 사용하지 않는다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">xmlReq</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">XMLHttpRequest</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Non-Microsoft browsers</span>
  <span class="nx">xmlReq</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">ActiveXObject</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">xmlReq</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="dl">'</span><span class="s1">Msxml2.XMLHTTP</span><span class="dl">'</span><span class="p">);</span>
    <span class="c1">// XMLHttpRequest in later versions of Internet Explorer</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="nx">xmlReq</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="dl">'</span><span class="s1">Microsoft.XMLHTTP</span><span class="dl">'</span><span class="p">);</span>
      <span class="c1">// Try version supported by older versions of Internet Explorer</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e2</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Unable to create an XMLHttpRequest with ActiveX</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>마소가 폭주하던 2000년대에나 쓰이던 코드. 지금은 그냥 아래 한 줄로 해결된다:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</code></pre></div></div>
<p>아래 두 예시를 각각 test1.html, test2.html로 만들어서 테스트 해보자:</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
<span class="nt">&lt;title&gt;</span>test1.html<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;script&gt;</span>
  <span class="kd">function</span> <span class="nx">loadDoc</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">demo</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">};</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">test2.html</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
  <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"loadDoc()"</span><span class="nt">&gt;</span>who r u<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"demo"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h2&gt;</span>i am waldo<span class="nt">&lt;/h2&gt;</span>
</code></pre></div></div>

<h2 id="xmlhttprequest의-프로퍼티">XMLHttpRequest의 프로퍼티</h2>

<h3 id="xmlhttprequestopen">XMLHttpRequest.open()</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>XMLHttpRequest.open( method, url [ , async ] )
</code></pre></div></div>
<ul>
  <li><strong>method</strong>: HTTP 메서드 타입 (get/post)</li>
  <li><strong>url</strong>: 서버 경로</li>
  <li><strong>async</strong>: 비동기 여부. (true/false)</li>
</ul>

<p>request의 유형을 지정한다. send()로 메시지를 날리기 전, 어디에 어떤 방식으로 작동하는지를 정하는 메서드. method와 url은 필수지만 async는 기본값이 true로 생략할 수 있는 항목이다. async를 false로 지정할 경우 send() 후 스크립트의 진행을 중단하며 서버로부터 응답이 올 때까지 대기한다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">test2.html</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// GET 방식으로 요청할 URL 설정</span>
</code></pre></div></div>

<h3 id="xmlhttprequestsetrequestheader">XMLHttpRequest.setRequestHeader()</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>XMLHttpRequest.setRequestHeader( header, value )
</code></pre></div></div>
<ul>
  <li><strong>header</strong>: 헤더의 이름</li>
  <li><strong>value</strong>: 헤더의 값</li>
</ul>

<p>HttpRequest 헤더의 값을 설정하는 메서드로 반드시 open()보다 나중에 호출되어야 한다.</p>

<h3 id="xmlhttprequestsend">XMLHttpRequest.send()</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>XMLHttpRequest.send( [ string ] )
</code></pre></div></div>
<ul>
  <li><strong>string</strong>: 폼 데이터로 전송할 문자열</li>
</ul>

<p>서버로 request 송신. open()에서 설정한 값에 따라 서버로 데이터를 요청한다. string은 HTTP 메서드 타입이 POST일 경우에만 명시하며 폼 데이터로 간주된다. POST 방식일 땐 아래 예시처럼 setRequestHeader()로 컨텐츠 타입을 지정하지 않으면 서버에서 처리할 수 없다. 그리고 string은 반드시 쿼리스트링 형태로 작성되어야 한다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">test4.html</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">application/x-www-form-urlencoded</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">first=111&amp;second=222</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="xmlhttprequestabort">XMLHttpRequest.abort()</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xhr.abort();
</code></pre></div></div>
<p>수행 중인 통신을 중단한다. 이미 날라간 request는 어쩔 수 없고 단지 응답을 무시할 뿐. <del>통수</del></p>

<h3 id="xmlhttprequestgetallresponseheaders">XMLHttpRequest.getAllResponseHeaders()</h3>
<p>response 헤더 정보를 출력한다. send()를 실행하기 전에는 빈 값을 리턴한다. 즉, 서버의 응답 후에만 사용 가능한 메서드</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">xhr</span><span class="p">.</span><span class="nx">getAllResponseHeaders</span><span class="p">();</span>
<span class="c1">// "Server: Apache-Coyote/1.1</span>
<span class="c1">// Content-Type: text/html;charset=UTF-8</span>
<span class="c1">// Content-Length: 22</span>
<span class="c1">// Date: Wed, 27 Jan 2016 15:19:02 GMT</span>
<span class="c1">// "</span>
</code></pre></div></div>

<h3 id="xmlhttprequestgetresponseheader">XMLHttpRequest.getResponseHeader()</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>XMLHttpRequest.getResponseHeader( header )
</code></pre></div></div>
<ul>
  <li><strong>header</strong>: 헤더의 이름</li>
</ul>

<p>response 헤더 중 특정한 값만 리턴한다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">xhr</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">)</span>
<span class="c1">// "text/html;charset=UTF-8"</span>
</code></pre></div></div>

<h3 id="xmlhttprequesttimeout">XMLHttpRequest.timeout</h3>
<p>지정한 시간을 초과하면 XMLHttpRequestEventTarget.ontimeout을 호출한다. 단위는 밀리초(milliseconds)</p>

<h3 id="xmlhttprequestresponsetext">XMLHttpRequest.responseText</h3>
<p>서버의 응답을 문자열로 리턴.</p>

<h3 id="xmlhttprequestresponsexml">XMLHttpRequest.responseXML</h3>
<p>서버의 응답을 XMLDocument로 파싱해 리턴. 파싱이 불가능하면 null을 리턴한다.</p>

<h3 id="xmlhttprequeststatus">XMLHttpRequest.status</h3>
<p>응답의 상태코드를 숫자로 리턴한다.</p>

<h3 id="xmlhttprequeststatustext">XMLHttpRequest.statusText</h3>
<p>응답의 상태코드를 문자열로 리턴한다. 단순히 숫자를 문자열로 표현하는게 아니라 상태코드가 뭘 의미하는지 나타낸다. 가령 상태코드가 404일 때 리턴되는 값은 “Not Found”</p>

<h3 id="xmlhttprequestreadystate">XMLHttpRequest.readyState</h3>
<p>XMLHttpRequest의 현재 상태를 의미한다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">0</code>: request not initialized.</li>
  <li><code class="language-plaintext highlighter-rouge">1</code>: server connection established</li>
  <li><code class="language-plaintext highlighter-rouge">2</code>: request received</li>
  <li><code class="language-plaintext highlighter-rouge">3</code>: processing request</li>
  <li><code class="language-plaintext highlighter-rouge">4</code>: request finished and response is ready</li>
</ul>

<h2 id="attach-callback-function">Attach callback function</h2>
<p>통신 후 성공 혹은 실패에 따른 처리가 필요하다면 서버가 응답했을 때 콜백으로 호출되는 프로퍼티에 함수를 할당하면 된다. 콜백 함수를 할당하는 방법은 XMLHttpRequest의 onreadystatechange() 메서드를 이용하거나 XMLHttpRequestEventTarget의 이벤트 핸들러를 이용하는 방법, 그리고 EventTarget.addEventListener() 이용하는 방법이 있다.</p>

<h3 id="xmlhttprequestonreadystatechange">XMLHttpRequest.onreadystatechange</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">complete</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">http://somewhere</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</code></pre></div></div>
<p>onreadystatechange()는 XMLHttpRequest의 프로퍼티로 콜백 함수를 저장한다. 이 메서드는 readyState의 값이 변할 때마다 호출되니 그대로 실행되도록 하면 안 되고 readyState의 값을 체크하는 조건 분기를 추가해야 원하는 결과를 얻을 수 있다.</p>

<h3 id="eventtargetaddeventlistener"><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">EventTarget.addEventListener()</a></h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>EventTarget.addEventListener( eventType, callback )
</code></pre></div></div>
<ul>
  <li><strong>eventType</strong>: callback이 실행될 이벤트의 유형 (ex: ‘load’)</li>
  <li><strong>callback</strong>: eventType에 지정한 이벤트가 발생했을 때 실행할 함수</li>
</ul>

<p>addEventListener()는 IE8에서 지원되지 않으니 주의할 것. <del>악의 축</del></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">reqListener</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span> <span class="c1">// this == xhr</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">load</span><span class="dl">'</span><span class="p">,</span> <span class="nx">reqListener</span><span class="p">);</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">http://example.org/example.txt</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="xmlhttprequesteventtarget"><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget">XMLHttpRequestEventTarget</a></h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="nx">xhr</span><span class="p">);</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">onabort</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">onabort - xhr.readyState: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">onerror - xhr.readyState: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">xhr.status: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">onloadstart</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">onloadstart - xhr.readyState: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">onloadend</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">onloadend - xhr.readyState: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">onprogress</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">progress - xhr.readyState: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">loaded: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">loaded</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">size: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">complete</span><span class="dl">'</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">test2.html</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</code></pre></div></div>
<p>XMLHttpRequestEventTarget은 XMLHttpRequest의 슈퍼클래스다. 상속받는 메서드는 다음과 같다:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">onabort</code>: abort 이벤트가 발생하면 호출된다.</li>
  <li><code class="language-plaintext highlighter-rouge">onerror</code>: 서버의 응답이 200이 아닐 때 호출된다.</li>
  <li><code class="language-plaintext highlighter-rouge">onloadstart</code>: XHR 요청을 시작할 때 호출된다.</li>
  <li><code class="language-plaintext highlighter-rouge">onloadend</code>: XHR 요청이 완료되면 호출된다. onload()와 다르게 성공/실패 상관없이 호출된다.</li>
  <li><code class="language-plaintext highlighter-rouge">onprogress</code>: onloadstart()와 onloadend() 사이에 호출된다. 파라미터로 ProgressEvent를 전달받으며 이 객체의 프로퍼티는 브라우저마다 다를 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">onload</code>: XHR 요청이 ‘성공적으로’ 완료되면 호출된다. 즉 XHR.status가 200일 때만 호출되는 메서드.</li>
  <li><code class="language-plaintext highlighter-rouge">ontimeout</code>: XHR.timeout으로 설정한 시간 내에 응답이 도착하지 않으면 호출된다. 요청은 실패한 것으로 간주되며 onprogress()와 onload()는 호출되지 않는다.</li>
</ul>
:ET