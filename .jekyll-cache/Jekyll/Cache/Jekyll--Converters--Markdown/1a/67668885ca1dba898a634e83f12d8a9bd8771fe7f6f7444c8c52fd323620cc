I">J
<p>자바에서 상속이란 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것을 말한다. 상속은 코드의 재사용성을 높이고 코드 중복을 제거하려는 목적으로 사용된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">클래스명</span> <span class="kd">extends</span> <span class="n">부모</span> <span class="n">클래스명</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">extends</code> 키워드를 클래스 선언부에 명시하여 상속을 구현한다. <code class="language-plaintext highlighter-rouge">extends</code> 뒤에 오는 클래스가 부모 클래스다. 자식 클래스는 부모 클래스의 생성자와 클래스 초기화 블록을 제외한 모든 멤버, 즉 변수와 메서드를 상속받는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Parent</span> <span class="n">parent</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Parent</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">getA</span><span class="o">());</span> <span class="c1">// hello</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">getB</span><span class="o">());</span> <span class="c1">// i'm not hello</span>

        <span class="nc">Child</span> <span class="n">child</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Child</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span> <span class="c1">// compile error: The constructor Child(String) is undefined</span>

        <span class="nc">Child</span> <span class="n">child2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Child</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">child2</span><span class="o">.</span><span class="na">getA</span><span class="o">());</span> <span class="c1">// null</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">child2</span><span class="o">.</span><span class="na">getB</span><span class="o">());</span> <span class="c1">// i'm not hello</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">a</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Parent</span><span class="o">()</span> <span class="o">{}</span>

    <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="s">"i'm not hello"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="o">{</span>
        <span class="c1">// 클래스 초기화 블록은 상속되지 않는다.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"initializing"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Parent</span><span class="o">(</span><span class="nc">String</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 생성자는 상속되지 않는다.</span>
        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getA</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getB</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">b</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Child</span> <span class="kd">extends</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="c1">// have nothing</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"부모멤버"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"부모의 메서드"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Child</span> <span class="kd">extends</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"자식멤버"</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">str</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">str</span><span class="o">);</span>

        <span class="kd">super</span><span class="o">.</span><span class="na">show</span><span class="o">();</span> <span class="c1">// 부모의 메서드, 즉 재정의 하기 전의 메서드를 의미함.</span>
        <span class="c1">// this.show();  // 무한재귀호출</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">Child</span><span class="o">().</span><span class="na">show</span><span class="o">()</span>
<span class="o">-&gt;</span> <span class="n">부모멤버</span>
<span class="o">-&gt;</span> <span class="n">자식멤버</span>
<span class="o">-&gt;</span> <span class="n">부모의</span> <span class="n">메서드</span>
</code></pre></div></div>

<p>자식 클래스의 인스턴스를 생성할 땐 자손의 멤버와 부모의 멤버가 모두 합쳐진 하나의 인스턴스가 생성된다. <strong>이때 원칙상 자식 클래스의 생성자에 부모 클래스의 생성자를 호출하는 코드인 <code class="language-plaintext highlighter-rouge">super()</code>가 호출되어야 하지만</strong> <code class="language-plaintext highlighter-rouge">super()</code>가 없으면 컴파일러가 자동으로 추가해주므로 신경 쓰지 않아도 된다.</p>

<p>부모 클래스에 선언된 인스턴스 변수와 같은 이름의 인스턴스 변수를 자손 클래스에 중복 정의했을 때, <code class="language-plaintext highlighter-rouge">super</code>가 참조하는 멤버와 <code class="language-plaintext highlighter-rouge">this</code>가 참조하는 멤버가 다르다.</p>

<p>다음을 보면 :</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestEverything</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Child</span> <span class="n">child</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Child</span><span class="o">();</span>
        <span class="n">child</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"부모에서 정의된 인스턴스 변수"</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">txt</span> <span class="o">=</span> <span class="s">"부모 txt"</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Child</span> <span class="kd">extends</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">txt</span> <span class="o">=</span> <span class="s">"자식 txt"</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">str</span> <span class="o">=</span> <span class="s">"자식이 재정의 한 인스턴스 변수"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">str</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">str</span><span class="o">);</span>  <span class="c1">// (1) 중복 정의되지 않은 경우</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">txt</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">txt</span><span class="o">);</span>  <span class="c1">// (2) 중복 정의된 경우</span>

        <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"지역변수"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>  <span class="c1">// (3) 인스턴스 변수와 같은 이름의 지역변수를 생성할 경우</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="o">-&gt;</span> <span class="n">자식이</span> <span class="n">재정의</span> <span class="n">한</span> <span class="n">인스턴스</span> <span class="n">변수</span>
<span class="o">-&gt;</span> <span class="n">자식이</span> <span class="n">재정의</span> <span class="n">한</span> <span class="n">인스턴스</span> <span class="n">변수</span>
<span class="o">-&gt;</span> <span class="n">부모</span> <span class="n">txt</span>
<span class="o">-&gt;</span> <span class="n">자식</span> <span class="n">txt</span>
<span class="o">-&gt;</span> <span class="n">지역변수</span>
</code></pre></div></div>

<p>부모 쪽에서만 정의된 인스턴스 변수 <code class="language-plaintext highlighter-rouge">str</code>은 <code class="language-plaintext highlighter-rouge">super</code>, <code class="language-plaintext highlighter-rouge">this</code> 모두 자식의 인스턴스 변수를 참조하지만 부모와 자식 양 쪽에서 중복 정의된 인스턴스 변수 <code class="language-plaintext highlighter-rouge">txt</code>는 <code class="language-plaintext highlighter-rouge">super</code>, <code class="language-plaintext highlighter-rouge">this</code> 각각 자신의 인스턴스 변수를 참조한다. <code class="language-plaintext highlighter-rouge">str</code>처럼 클래스 타입을 명시한 뒤 같은 이름으로 변수를 초기화하면 그 변수는 더 이상 인스턴스 변수가 아닌 지역변수를 참조한다. 따라서 위의 경우처럼 같은 이름의 지역변수가 선언될 경우엔 <code class="language-plaintext highlighter-rouge">this</code> 없이는 인스턴스 변수에 접근할 수 없다.</p>

<p>부모 클래스에 추상 클래스가 존재한다면 해당 메서드는 반드시 재정의 해야한다. 그렇지 않을경우 컴파일 에러가 발생할 것이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Child</span> <span class="kd">extends</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>스태틱 메서드는 재정의 할 수 없다. 하지만 접근은 가능:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">stM</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ㅎㅇ"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Child</span> <span class="kd">extends</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">stM</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>부모타입의 참조변수에 자식의 인스턴스를 할당할 시 재정의<code class="language-plaintext highlighter-rouge">override</code> 된 멤버에 한해서 자식의 멤버가 실행우선권을 갖는다:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestEverything</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Parent</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Child</span><span class="o">();</span>
        <span class="n">p</span><span class="o">.</span><span class="na">show</span><span class="o">();</span> <span class="c1">// 자식 메서드</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"부모 메서드"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Child</span> <span class="kd">extends</span> <span class="nc">Parent</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">show</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"자식 메서드"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET